from bs4 import BeautifulSoup
from plone import api
from plone.app.testing import TEST_USER_NAME
from plone.app.testing import TEST_USER_PASSWORD
from plone.restapi.testing import RelativeSession
from urllib.parse import urlparse
from zope.component.hooks import setSite

import pytest
import requests
import transaction


@pytest.fixture()
def user_member() -> dict:
    return {
        "id": "adf05305-9b27-4fad-b633-23d21ef32431",
        "username": TEST_USER_NAME,
        "password": TEST_USER_PASSWORD,
    }


@pytest.fixture()
def user_editor() -> dict:
    return {
        "id": "519af5bf-97d9-409a-8757-d7572d6cb144",
        "username": "plone-editor",
        "password": "12345678",
    }


@pytest.fixture(scope="session")
def keycloak(keycloak_service):
    return {
        "issuer": f"{keycloak_service}/realms/plone-test",
        "client_id": "plone",
        "client_secret": "12345678",  # nosec B105
        "scope": ("openid", "profile", "email"),
        "redirect_uris": ("/@login-oidc/oidc",),
        "create_restapi_ticket": True,
    }


@pytest.fixture()
def app(restapi):
    return restapi["app"]


@pytest.fixture()
def portal(restapi, keycloak, keycloak_api):
    portal = restapi["portal"]
    setSite(portal)
    plugin = portal.acl_users.oidc
    with api.env.adopt_roles(["Manager", "Member"]):
        for key, value in keycloak.items():
            setattr(plugin, key, value)
        for key, value in keycloak_api.items():
            name = f"keycloak_groups.{key}"
            api.portal.set_registry_record(name, value)
    transaction.commit()
    yield portal
    with api.env.adopt_roles(["Manager", "Member"]):
        for key, value in keycloak.items():
            if key != "scope":
                value = ""
            setattr(plugin, key, value)
    transaction.commit()


@pytest.fixture()
def http_request(restapi):
    return restapi["request"]


@pytest.fixture()
def request_api_factory(portal):
    def factory():
        url = portal.absolute_url()
        api_session = RelativeSession(f"{url}/++api++")
        return api_session

    return factory


@pytest.fixture()
def api_anon_request(request_api_factory):
    return request_api_factory()


@pytest.fixture()
def keycloak_login():
    def func(
        url: str, username: str = TEST_USER_NAME, password: str = TEST_USER_PASSWORD
    ):
        session = requests.Session()
        resp = session.get(url)
        soup = BeautifulSoup(resp.content)
        data = {
            "username": username,
            "password": password,
            "credentialId": "",
        }
        next_url = soup.find("form", attrs={"id": "kc-form-login"})["action"]
        resp = session.post(next_url, data=data, allow_redirects=False)
        location = resp.headers["Location"]
        qs = urlparse(location).query
        return qs

    return func


@pytest.fixture()
def api_authenticated_session_factory(request_api_factory, keycloak_login):
    def func(username: str, password: str):
        api_request = request_api_factory()
        endpoint = "@login-oidc/oidc"
        response = api_request.get(endpoint)
        data = response.json()
        next_url = data["next_url"]
        # Authenticate on keycloak with the url generated by
        # the GET endpoint
        qs = keycloak_login(next_url, username=username, password=password)
        # Now we do a POST request to our endpoint, passing the
        # returned querystring in the payload
        response = api_request.post(endpoint, json={"qs": qs})
        token = response.json()["token"]
        api_request.headers["Authorization"] = f"Bearer {token}"
        return api_request

    return func
